#!/usr/bin/env python
#
# Copyright (c) 2014 Hewlett-Packard Development Company, L.P.
# Copyright (c) 2013 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import logging
import os
import signal
import sys

# Add ../ to the Python search path if ../dwarf/__init__.py exists
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                                os.pardir, os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'dwarf', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from dwarf import api_server
from dwarf import config
from dwarf import log

CONF = config.Config()
LOG = logging.getLogger(__name__)
DWARF = None


def _parse_arguments():
    aparser = argparse.ArgumentParser()
    aparser.add_argument('-s', '--stdout', action='store_true',
                         help='Log to stdout instead of the logfile')
    aargs = aparser.parse_args()
    return aargs


def cleanup(_signal, _frame):
    # Stop the API server thread
    DWARF.stop()


def main():
    global DWARF   # pylint: disable=W0603

    # parse the commandline arguments and initialize the logger
    aargs = _parse_arguments()
    log.init_logger(log_to_stdout=aargs.stdout)

    LOG.info('Dwarf starting')

    # Dump the config options
    CONF.dump_options()

    # Install the cleanup handler
    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)

    # Create and start the API server thread
    DWARF = api_server.ApiServer(quiet=False)
    DWARF.start()

    # Wait for the API server thread to terminate
    while DWARF.is_alive():
        DWARF.join(3600)

    LOG.info('Dwarf stopped')


if __name__ == '__main__':
    main()
